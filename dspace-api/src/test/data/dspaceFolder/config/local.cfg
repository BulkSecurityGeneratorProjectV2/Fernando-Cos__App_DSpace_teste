##########################
# DATABASE CONFIGURATION #
##########################

# For Unit Testing we use the H2 (in memory) database
db.driver = org.h2.Driver
db.dialect=org.hibernate.dialect.H2Dialect
# Use a 10 second database lock timeout to avoid occasional JDBC lock timeout errors
db.url = jdbc:h2:mem:test;LOCK_TIMEOUT=10000;
db.username = sa
db.password =
# H2's default schema is PUBLIC
db.schema = PUBLIC

#######################
# EMAIL CONFIGURATION #
#######################

# SMTP mail server (allows DSpace to send email notifications)
mail.server = localhost

# An option is added to disable the mailserver. By default, this property is set to false
# By setting mail.server.disabled = true, DSpace will not send out emails.
# It will instead log the subject of the email which should have been sent
# This is especially useful for development and test environments where production data is used when testing functionality.
mail.server.disabled = true

########################
# HANDLE CONFIGURATION #
########################

# CNRI Handle prefix
# (Defaults to a dummy/fake prefix of 123456789)
handle.prefix = 123456789

#####################
# LOGLEVEL SETTINGS #
#####################
loglevel.other = INFO
# loglevel.other: Log level for other third-party tools/APIs used by DSpace
# Possible values (from most to least info): DEBUG, INFO, WARN, ERROR, FATAL
loglevel.dspace = INFO
# loglevel.dspace: Log level for all DSpace-specific code (org.dspace.*)
# Possible values (from most to least info): DEBUG, INFO, WARN, ERROR, FATAL


###########################################
# CUSTOM UNIT / INTEGRATION TEST SETTINGS #
###########################################
# Configure authority control for Unit Testing (in DSpaceControlledVocabularyTest)
# (This overrides default, commented out settings in dspace.cfg)
plugin.selfnamed.org.dspace.content.authority.ChoiceAuthority = \
	org.dspace.content.authority.DCInputAuthority, \
    org.dspace.content.authority.DSpaceControlledVocabulary

# Configure some more Plugins for PluginTest class
# NOTE: Plugins are just *interfaces*. So, here we are defining some plugins
# based on java.util.List interface and giving them names.
# (These are used by PluginTest)
plugin.named.java.util.List = \
    java.util.ArrayList = MyArrayList, \
    java.util.LinkedList = MyLinkedList, \
    java.util.AttributeList = MyAttributeList

# Define a single Map plugin (used by PluginTest)
plugin.single.java.util.Map = java.util.HashMap

# Define a sequence of Collection plugins (used by PluginTest)
plugin.sequence.java.util.Collection = \
    java.util.ArrayList, \
    java.util.LinkedList, \
    java.util.Stack, \
    java.util.TreeSet

# Enable a test authority control on dc.language.iso field
choices.plugin.dc.language.iso = common_iso_languages
choices.presentation.dc.language.iso = select
authority.controlled.dc.language.iso = true